[tool.poetry]
name = "template"
version = "0.1.0"
description = "A template repository for Jua."
authors = ["Rodrigo Almeida"]
readme = "README.md"
license = "JUA LICENSE"
packages = [{include = "template"}]

[tool.poetry.dependencies]
python = "^3.10"
aws-cdk-lib = "^2.50.0"


[tool.poetry.group.test.dependencies]
pytest = "^7.2.0"
pytest-cov = "^4.0.0"


[tool.poetry.group.format.dependencies]
black = "^22.10.0"
isort = "^5.10.1"
ruff = "0.0.254"
pre-commit = "^2.20.0"
commitizen = "^2.37.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry-exec-plugin.commands]
test = "pytest"
format = "isort . && black . && ruff check ."
format-ci = "isort --check . && black --check . && ruff check . --format=github"
synth = "cdk synth"
deploy = "cdk deploy"
deploy-ci = "cdk deploy --require-approval never"
teardown-ci = "cdk destroy -f"

[tool.pytest.ini_options]
addopts = "--cov=template --cov=stack --ignore=cdk.out"

[tool.isort]
profile = 'black'

[tool.ruff]
exclude = ["cdk.out", ".venv"]
select = [
    "E",   # pycodestyle
    "F",   # pyflakes
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "T10", # flake8-debugger
    "EXE", # flake8-executable
    "ISC", # flake8-implicit-str-concat
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "RSE", # flake8-raise
    "SLF", # flake8-self 
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "NPY", # numpy
    "RUF", # ruff

    # strict
    "ERA", # eradicate (commented out code)
    "ANN", # flake8-annotations
    "DTZ", # flake8-datetimez
    "PD",  # pandas-vet

    # stylistic
    "RET", # flake8-return
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "D",   # pydocstyle

    # random
    "EM",  # flake8-errmsg - requires assigning error message to a variable before logging it
]

 # A mix of rules that we might consider including, but require some discussion
 ignore = [
     "TRY003",  # Avoid specifying long messages outside the exception class
     "TRY300",  # Recommend using try-except-else
     "PLR2004", # Magic value used in comparison
     
     # strict and could consider
     "ANN", # flake8-annotations - likely all covered by mypy --strict if we choose to use it
     "DTZ", # flake8-datetimez - good if we want to get serious about datetimes
     "PD",  # pandas-vet
     
     # stylistic
     "RET", # flake8-return - no assigning variables just before returning
     "A",   # flake8-builtins - avoid shadowing builtin names
     "COM", # flake8-commas - end things with commas
     "D",   # pydocstyle - maybe good if we want to go fully into consistent docstrings
 
     # random
     "EM",  # flake8-errmsg - requires assigning error message to a variable before logging it
 ]

[tool.ruff.per-file-ignores]
"tests/*" = [
    "S101", # use of "assert"
    "S108", # creation of predictable temporary file
]

[tool.ruff.pylint]
max-args = 7

[tool.ruff.flake8-bugbear]
extend-immutable-calls = [
    "fastapi.Depends", 
    "fastapi.Query", 
    "fastapi.Header", 
    "fastapi.Body", 
    "fastapi.Security",
]


