name: Test and Deploy
run-name: ${{ github.ref }}, ${{ github.event_name }}
on:
  push:
    branches: [main]
    tags:
      - "**"
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
  pull-requests: write # To fetch PR number and label

env:
  PYTHON_VERSION: "3.10"
  POETRY_VERSION: "1.3.1"
  NODE_VERSION: "16.3.0"
  AWS_CDK_VERSION: "2.5.0"

jobs:
  test:
    runs-on: ubuntu-latest
    if: |
      !(contains(github.event.pull_request.labels.*.name, ':rocket: deployed') &&
      github.event.pull_request.merged == true)
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Load cached $HOME/.local
        uses: actions/cache@v3.0.11
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}-${{ hashFiles('.github/workflows/test_and_deploy.yaml') }}

      - name: Setup Poetry
        run: curl -sSL https://install.python-poetry.org | python - --version $POETRY_VERSION

      - name: Add Poetry extension
        run: poetry self add poetry-exec-plugin

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3.0.11
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/test_and_deploy.yaml') }}

      - name: Install dependencies with Poetry
        run: poetry install

      - name: Run format
        run: poetry exec format-ci

      - name: Run tests
        run: poetry exec test

  deploy-branch:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Load cached $HOME/.local
        uses: actions/cache@v3.0.11
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}-${{ hashFiles('.github/workflows/test_and_deploy.yaml') }}

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Poetry
        run: curl -sSL https://install.python-poetry.org | python - --version $POETRY_VERSION

      - name: Add Poetry extension
        run: poetry self add poetry-exec-plugin

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3.0.11
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/test_and_deploy.yaml') }}

      - name: Install dependencies with Poetry
        run: poetry install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: arn:aws:iam::323677137491:role/GitHubActions
          aws-region: us-east-1

      - name: Install AWS CDK
        run: npm i -g aws-cdk

      - name: Get PR number
        id: pr
        run: echo "pull_request_number=$(gh pr view --json number -q .number || echo "")" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Run deploy
        env:
          STAGE: ${{ github.ref_name }}-${{ steps.pr.outputs.pull_request_number }}
        run: poetry exec deploy-ci

      - uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: ":rocket: deployed"
          number: ${{ steps.pr.outputs.pull_request_number }}

  teardown-branch:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.pull_request.labels.*.name, ':rocket: deployed') &&
      github.event.pull_request.merged == true
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Load cached $HOME/.local
        uses: actions/cache@v3.0.11
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}-${{ hashFiles('.github/workflows/test_and_deploy.yaml') }}

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Poetry
        run: curl -sSL https://install.python-poetry.org | python - --version $POETRY_VERSION

      - name: Add Poetry extension
        run: poetry self add poetry-exec-plugin

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3.0.11
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/test_and_deploy.yaml') }}

      - name: Install dependencies with Poetry
        run: poetry install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: arn:aws:iam::323677137491:role/GitHubActions
          aws-region: us-east-1

      - name: Install AWS CDK
        run: npm i -g aws-cdk

      - name: Run teardown
        env:
          STAGE: ${{ github.head_ref }}-${{ github.event.number }}
        run: poetry exec teardown-ci

  deploy-stage:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: stage
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Load cached $HOME/.local
        uses: actions/cache@v3.0.11
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}-${{ hashFiles('.github/workflows/test_and_deploy.yaml') }}

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Poetry
        run: curl -sSL https://install.python-poetry.org | python - --version $POETRY_VERSION

      - name: Add Poetry extension
        run: poetry self add poetry-exec-plugin

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3.0.11
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/test_and_deploy.yaml') }}

      - name: Install dependencies with Poetry
        run: poetry install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: arn:aws:iam::323677137491:role/GitHubActions
          aws-region: us-east-1

      - name: Install AWS CDK
        run: npm i -g aws-cdk

      - name: Run deploy
        env:
          STAGE: stage
        run: poetry exec deploy-ci

  deploy-prod:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.event.ref, 'refs/tags')
    environment: prod
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Load cached $HOME/.local
        uses: actions/cache@v3.0.11
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}-${{ hashFiles('.github/workflows/test_and_deploy.yaml') }}

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Poetry
        run: curl -sSL https://install.python-poetry.org | python - --version $POETRY_VERSION

      - name: Add Poetry extension
        run: poetry self add poetry-exec-plugin

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3.0.11
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/test_and_deploy.yaml') }}

      - name: Install dependencies with Poetry
        run: poetry install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: arn:aws:iam::323677137491:role/GitHubActions
          aws-region: us-east-1

      - name: Install AWS CDK
        run: npm i -g aws-cdk

      - name: Run deploy
        env:
          STAGE: prod
        run: poetry exec deploy-ci
